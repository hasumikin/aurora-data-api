#!/usr/bin/env ruby

require 'aurora-data-api/version'
require 'thor'

Date = "date"

module AuroraDataApi
  class Error < StandardError; end

  class Schema
    CREATE_TABLE = Array.new
    ALTER_TABLE = Array.new
  end

  class Model
    SCHEMA = { literal_id: :id }

    def self.literal_id(lit)
      SCHEMA[:literal_id] = lit
    end

    def self.table(name)
      SCHEMA[:table_name] = name
    end

    def self.schema(&block)
      converter = Converter.new(SCHEMA, self)
      converter.head
      converter.instance_eval(&block)
      converter.tail
      Schema::CREATE_TABLE << converter.create_table
      Schema::ALTER_TABLE << converter.alter_table
    end
  end

  class Converter
    TYPES = {
      ::Date    => ::Date,
      ::Time    => "timestamp with time zone",
      ::String  => "text",
      ::Integer => "bigint",
      ::Float   => "double precision"
    }

    def initialize(schema, klass)
      @table_name = schema[:table_name] || "#{klass.name.downcase}s"
      @literal_id = schema[:literal_id]
      @create_table = []
      @alter_table = []
    end

    attr_reader :create_table, :alter_table

    def head
      @create_table << %Q/CREATE TABLE "#{@table_name}" (/
      @create_table << %Q/  "#{@literal_id}" bigint NOT NULL GENERATED ALWAYS AS IDENTITY,/
    end

    def tail
      @create_table << %Q/  "created_at" #{TYPES[Time]} NOT NULL,/
      @create_table << %Q/  "updated_at" #{TYPES[Time]} NOT NULL,/
      @create_table << %Q/  PRIMARY KEY ("#{@literal_id}")/
      @create_table << %Q/);\n/
    end

    def col(name, type, **params)
      line = "  "
      case type
      when Symbol
        col_name = "#{name}_#{@literal_id}"
        line << %Q/"#{col_name}" /
        line << TYPES[Integer]
        @alter_table << %Q/ALTER TABLE ONLY "#{@table_name}" ADD CONSTRAINT "#{@table_name}_#{col_name}_fkey" FOREIGN KEY ("#{col_name}") REFERENCES "#{params[:table_name]}" ("#{@literal_id}");/
      else
        line << %Q/"#{name}" /
        line << TYPES[type]
      end
      params.each do |k, v|
        case k
        when :null
          line << " NOT NULL" unless v
        when :default
          line << " DEFAULT "
          case v
          when String, Symbol
            line << "'#{v}'"
          else
            line << "#{v}"
          end
        when :unique
          line << " UNIQUE" if v
        end
      end
      line << ","
      @create_table << line
    end
  end

  class Tool < Thor
    DEFAULT_MODELS_DIR  = "app/models"
    DEFAULT_OUTPUT_PATH = "db/schema.sql"

    desc "version", "Print version"
    def version
      puts "aurora-data-api v#{AuroraDataApi::VERSION}"
    end

    desc "export", "Overwrite #{DEFAULT_OUTPUT_PATH} by aggregating #{DEFAULT_MODELS_DIR}/*.rb"
    option :models, aliases: :m, default: DEFAULT_MODELS_DIR
    option :output, aliases: :o, default: DEFAULT_OUTPUT_PATH
    def export
      models_dir = options[:models]
      output_path = options[:output]
      Dir.glob("#{models_dir}/*.rb").each do |rb|
        load rb
      end
      if Schema::CREATE_TABLE.empty? && Schema::ALTER_TABLE.empty?
        puts "Nothing to be exported."
        exit
      end
      overwrite = false
      if File.exist? output_path
        print "#{output_path} exists. Overwrite? [Y/n]: "
        answer = STDIN.gets.chomp
        if %w(Y y yes).include?(answer.chomp)
          overwrite = true
        else
          puts "Abort."
          exit
        end
      else
        overwrite = true
      end
      if overwrite
        File.open output_path, "w" do |f|
          f.write <<~COMMENT
            /*
             * This file was automatically genarated by the command:
             *   aurora-data-api export --models #{models_dir} --output #{output_path}
             *
             * Genarated at #{Time.now.to_s}
             *
             * https://github.com/hasumikin/aurora-data-api
             */\n
          COMMENT
          f.write Schema::CREATE_TABLE.flatten.join("\n")
          f.write "\n"
          f.write Schema::ALTER_TABLE.flatten.join("\n")
        end
      end
    end
  end
end

AuroraDataApi::Tool.start
